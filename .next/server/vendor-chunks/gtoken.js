"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gtoken";
exports.ids = ["vendor-chunks/gtoken"];
exports.modules = {

/***/ "(rsc)/./node_modules/gtoken/build/cjs/src/index.cjs":
/*!*****************************************************!*\
  !*** ./node_modules/gtoken/build/cjs/src/index.cjs ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleToken = void 0;\nvar fs = _interopRequireWildcard(__webpack_require__(/*! fs */ \"fs\"));\nvar _gaxios = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/cjs/src/index.js\");\nvar jws = _interopRequireWildcard(__webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\"));\nvar path = _interopRequireWildcard(__webpack_require__(/*! path */ \"path\"));\nvar _util = __webpack_require__(/*! util */ \"util\");\nfunction _interopRequireWildcard(e, t) {\n    if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap();\n    return (_interopRequireWildcard = function _interopRequireWildcard(e, t) {\n        if (!t && e && e.__esModule) return e;\n        var o, i, f = {\n            __proto__: null,\n            \"default\": e\n        };\n        if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f;\n        if (o = t ? n : r) {\n            if (o.has(e)) return o.get(e);\n            o.set(e, f);\n        }\n        for(var _t3 in e)\"default\" !== _t3 && ({}).hasOwnProperty.call(e, _t3) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t3)) && (i.get || i.set) ? o(f, _t3, i) : f[_t3] = e[_t3]);\n        return f;\n    })(e, t);\n}\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classPrivateMethodInitSpec(e, a) {\n    _checkPrivateRedeclaration(e, a), a.add(e);\n}\nfunction _classPrivateFieldInitSpec(e, t, a) {\n    _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n    if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _classPrivateFieldSet(s, a, r) {\n    return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _classPrivateFieldGet(s, a) {\n    return s.get(_assertClassBrand(s, a));\n}\nfunction _assertClassBrand(e, t, n) {\n    if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n    throw new TypeError(\"Private element is not present on this object\");\n}\nfunction _defineProperties(e, r) {\n    for(var t = 0; t < r.length; t++){\n        var o = r[t];\n        o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n    }\n}\nfunction _createClass(e, r, t) {\n    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n        writable: !1\n    }), e;\n}\nfunction _classCallCheck(a, n) {\n    if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _callSuper(t, o, e) {\n    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _possibleConstructorReturn(t, e) {\n    if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return _assertThisInitialized(t);\n}\nfunction _assertThisInitialized(e) {\n    if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    return e;\n}\nfunction _inherits(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n        constructor: {\n            value: t,\n            writable: !0,\n            configurable: !0\n        }\n    }), Object.defineProperty(t, \"prototype\", {\n        writable: !1\n    }), e && _setPrototypeOf(t, e);\n}\nfunction _wrapNativeSuper(t) {\n    var r = \"function\" == typeof Map ? new Map() : void 0;\n    return _wrapNativeSuper = function _wrapNativeSuper(t) {\n        if (null === t || !_isNativeFunction(t)) return t;\n        if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n        if (void 0 !== r) {\n            if (r.has(t)) return r.get(t);\n            r.set(t, Wrapper);\n        }\n        function Wrapper() {\n            return _construct(t, arguments, _getPrototypeOf(this).constructor);\n        }\n        return Wrapper.prototype = Object.create(t.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: !1,\n                writable: !0,\n                configurable: !0\n            }\n        }), _setPrototypeOf(Wrapper, t);\n    }, _wrapNativeSuper(t);\n}\nfunction _construct(t, e, r) {\n    if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n    var o = [\n        null\n    ];\n    o.push.apply(o, e);\n    var p = new (t.bind.apply(t, o))();\n    return r && _setPrototypeOf(p, r.prototype), p;\n}\nfunction _isNativeReflectConstruct() {\n    try {\n        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n    } catch (t) {}\n    return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n        return !!t;\n    })();\n}\nfunction _isNativeFunction(t) {\n    try {\n        return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n    } catch (n) {\n        return \"function\" == typeof t;\n    }\n}\nfunction _setPrototypeOf(t, e) {\n    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {\n        return t.__proto__ = e, t;\n    }, _setPrototypeOf(t, e);\n}\nfunction _getPrototypeOf(t) {\n    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {\n        return t.__proto__ || Object.getPrototypeOf(t);\n    }, _getPrototypeOf(t);\n}\nfunction _defineProperty(e, r, t) {\n    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n        value: t,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n    if (\"object\" != _typeof(t) || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n        var i = e.call(t, r || \"default\");\n        if (\"object\" != _typeof(i)) return i;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n}\nfunction _regenerator() {\n    var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\";\n    function i(r, n, o, i) {\n        var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype);\n        return _regeneratorDefine2(u, \"_invoke\", function(r, n, o) {\n            var i, c, u, f = 0, p = o || [], y = !1, G = {\n                p: 0,\n                n: 0,\n                v: e,\n                a: d,\n                f: d.bind(e, 4),\n                d: function d(t, r) {\n                    return i = t, c = 0, u = e, G.n = r, a;\n                }\n            };\n            function d(r, n) {\n                for(c = r, u = n, t = 0; !y && f && !o && t < p.length; t++){\n                    var o, i = p[t], d = G.p, l = i[2];\n                    r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));\n                }\n                if (o || r > 1) return a;\n                throw y = !0, n;\n            }\n            return function(o, p, l) {\n                if (f > 1) throw TypeError(\"Generator is already running\");\n                for(y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;){\n                    i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);\n                    try {\n                        if (f = 2, i) {\n                            if (c || (o = \"next\"), t = i[o]) {\n                                if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\");\n                                if (!t.done) return t;\n                                u = t.value, c < 2 && (c = 0);\n                            } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1);\n                            i = e;\n                        } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;\n                    } catch (t) {\n                        i = e, c = 1, u = t;\n                    } finally{\n                        f = 1;\n                    }\n                }\n                return {\n                    value: t,\n                    done: y\n                };\n            };\n        }(r, o, i), !0), u;\n    }\n    var a = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    t = Object.getPrototypeOf;\n    var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function() {\n        return this;\n    }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);\n    function f(e) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e;\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function() {\n        return this;\n    }), _regeneratorDefine2(u, \"toString\", function() {\n        return \"[object Generator]\";\n    }), (_regenerator = function _regenerator() {\n        return {\n            w: i,\n            m: f\n        };\n    })();\n}\nfunction _regeneratorDefine2(e, r, n, t) {\n    var i = Object.defineProperty;\n    try {\n        i({}, \"\", {});\n    } catch (e) {\n        i = 0;\n    }\n    _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {\n        if (r) i ? i(e, r, {\n            value: n,\n            enumerable: !t,\n            configurable: !t,\n            writable: !t\n        }) : e[r] = n;\n        else {\n            var o = function o(r, n) {\n                _regeneratorDefine2(e, r, function(e) {\n                    return this._invoke(r, n, e);\n                });\n            };\n            o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2);\n        }\n    }, _regeneratorDefine2(e, r, n, t);\n}\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) {\n    try {\n        var i = n[a](c), u = i.value;\n    } catch (n) {\n        return void e(n);\n    }\n    i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n    return function() {\n        var t = this, e = arguments;\n        return new Promise(function(r, o) {\n            var a = n.apply(t, e);\n            function _next(n) {\n                asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n            }\n            function _throw(n) {\n                asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n            }\n            _next(void 0);\n        });\n    };\n} /**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */ \nvar readFile = fs.readFile ? (0, _util.promisify)(fs.readFile) : /*#__PURE__*/ _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee() {\n    return _regenerator().w(function(_context) {\n        while(1)switch(_context.n){\n            case 0:\n                throw new ErrorWithCode(\"use key rather than keyFile.\", \"MISSING_CREDENTIALS\");\n            case 1:\n                return _context.a(2);\n        }\n    }, _callee);\n}));\nvar GOOGLE_TOKEN_URL = \"https://oauth2.googleapis.com/token\";\nvar GOOGLE_REVOKE_TOKEN_URL = \"https://oauth2.googleapis.com/revoke?token=\";\nvar ErrorWithCode = /*#__PURE__*/ function(_Error) {\n    function ErrorWithCode(message, code) {\n        var _this;\n        _classCallCheck(this, ErrorWithCode);\n        _this = _callSuper(this, ErrorWithCode, [\n            message\n        ]);\n        _defineProperty(_this, \"code\", void 0);\n        _this.code = code;\n        return _this;\n    }\n    _inherits(ErrorWithCode, _Error);\n    return _createClass(ErrorWithCode);\n}(/*#__PURE__*/ _wrapNativeSuper(Error));\nvar _inFlightRequest = /*#__PURE__*/ new WeakMap();\nvar _GoogleToken_brand = /*#__PURE__*/ new WeakSet();\nvar GoogleToken = exports.GoogleToken = /*#__PURE__*/ function() {\n    /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */ function GoogleToken(_options) {\n        _classCallCheck(this, GoogleToken);\n        _classPrivateMethodInitSpec(this, _GoogleToken_brand);\n        _defineProperty(this, \"expiresAt\", void 0);\n        _defineProperty(this, \"key\", void 0);\n        _defineProperty(this, \"keyFile\", void 0);\n        _defineProperty(this, \"iss\", void 0);\n        _defineProperty(this, \"sub\", void 0);\n        _defineProperty(this, \"scope\", void 0);\n        _defineProperty(this, \"rawToken\", void 0);\n        _defineProperty(this, \"tokenExpires\", void 0);\n        _defineProperty(this, \"email\", void 0);\n        _defineProperty(this, \"additionalClaims\", void 0);\n        _defineProperty(this, \"eagerRefreshThresholdMillis\", void 0);\n        _defineProperty(this, \"transporter\", {\n            request: function request(opts) {\n                return (0, _gaxios.request)(opts);\n            }\n        });\n        _classPrivateFieldInitSpec(this, _inFlightRequest, void 0);\n        _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, _options);\n    }\n    /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */ return _createClass(GoogleToken, [\n        {\n            key: \"accessToken\",\n            get: function get() {\n                return this.rawToken ? this.rawToken.access_token : undefined;\n            }\n        },\n        {\n            key: \"idToken\",\n            get: function get() {\n                return this.rawToken ? this.rawToken.id_token : undefined;\n            }\n        },\n        {\n            key: \"tokenType\",\n            get: function get() {\n                return this.rawToken ? this.rawToken.token_type : undefined;\n            }\n        },\n        {\n            key: \"refreshToken\",\n            get: function get() {\n                return this.rawToken ? this.rawToken.refresh_token : undefined;\n            }\n        },\n        {\n            key: \"hasExpired\",\n            value: function hasExpired() {\n                var now = new Date().getTime();\n                if (this.rawToken && this.expiresAt) {\n                    return now >= this.expiresAt;\n                } else {\n                    return true;\n                }\n            }\n        },\n        {\n            key: \"isTokenExpiring\",\n            value: function isTokenExpiring() {\n                var _this$eagerRefreshThr;\n                var now = new Date().getTime();\n                var eagerRefreshThresholdMillis = (_this$eagerRefreshThr = this.eagerRefreshThresholdMillis) !== null && _this$eagerRefreshThr !== void 0 ? _this$eagerRefreshThr : 0;\n                if (this.rawToken && this.expiresAt) {\n                    return this.expiresAt <= now + eagerRefreshThresholdMillis;\n                } else {\n                    return true;\n                }\n            }\n        },\n        {\n            key: \"getToken\",\n            value: function getToken(callback) {\n                var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n                if (_typeof(callback) === \"object\") {\n                    opts = callback;\n                    callback = undefined;\n                }\n                opts = Object.assign({\n                    forceRefresh: false\n                }, opts);\n                if (callback) {\n                    var cb = callback;\n                    _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts).then(function(t) {\n                        return cb(null, t);\n                    }, callback);\n                    return;\n                }\n                return _assertClassBrand(_GoogleToken_brand, this, _getTokenAsync).call(this, opts);\n            }\n        },\n        {\n            key: \"getCredentials\",\n            value: function() {\n                var _getCredentials = _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee2(keyFile) {\n                    var ext, key, body, privateKey, clientEmail, _privateKey, _t;\n                    return _regenerator().w(function(_context2) {\n                        while(1)switch(_context2.n){\n                            case 0:\n                                ext = path.extname(keyFile);\n                                _t = ext;\n                                _context2.n = _t === \".json\" ? 1 : _t === \".der\" ? 4 : _t === \".crt\" ? 4 : _t === \".pem\" ? 4 : _t === \".p12\" ? 6 : _t === \".pfx\" ? 6 : 7;\n                                break;\n                            case 1:\n                                _context2.n = 2;\n                                return readFile(keyFile, \"utf8\");\n                            case 2:\n                                key = _context2.v;\n                                body = JSON.parse(key);\n                                privateKey = body.private_key;\n                                clientEmail = body.client_email;\n                                if (!(!privateKey || !clientEmail)) {\n                                    _context2.n = 3;\n                                    break;\n                                }\n                                throw new ErrorWithCode(\"private_key and client_email are required.\", \"MISSING_CREDENTIALS\");\n                            case 3:\n                                return _context2.a(2, {\n                                    privateKey: privateKey,\n                                    clientEmail: clientEmail\n                                });\n                            case 4:\n                                _context2.n = 5;\n                                return readFile(keyFile, \"utf8\");\n                            case 5:\n                                _privateKey = _context2.v;\n                                return _context2.a(2, {\n                                    privateKey: _privateKey\n                                });\n                            case 6:\n                                throw new ErrorWithCode(\"*.p12 certificates are not supported after v6.1.2. \" + \"Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.\", \"UNKNOWN_CERTIFICATE_TYPE\");\n                            case 7:\n                                throw new ErrorWithCode(\"Unknown certificate type. Type is determined based on file extension. \" + \"Current supported extensions are *.json, and *.pem.\", \"UNKNOWN_CERTIFICATE_TYPE\");\n                            case 8:\n                                return _context2.a(2);\n                        }\n                    }, _callee2);\n                }));\n                function getCredentials(_x) {\n                    return _getCredentials.apply(this, arguments);\n                }\n                return getCredentials;\n            }()\n        },\n        {\n            key: \"revokeToken\",\n            value: function revokeToken(callback) {\n                if (callback) {\n                    _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this).then(function() {\n                        return callback();\n                    }, callback);\n                    return;\n                }\n                return _assertClassBrand(_GoogleToken_brand, this, _revokeTokenAsync).call(this);\n            }\n        }\n    ]);\n}();\nfunction _getTokenAsync(_x2) {\n    return _getTokenAsync2.apply(this, arguments);\n}\nfunction _getTokenAsync2() {\n    _getTokenAsync2 = _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee3(opts) {\n        return _regenerator().w(function(_context3) {\n            while(1)switch(_context3.n){\n                case 0:\n                    if (!(_classPrivateFieldGet(_inFlightRequest, this) && !opts.forceRefresh)) {\n                        _context3.n = 1;\n                        break;\n                    }\n                    return _context3.a(2, _classPrivateFieldGet(_inFlightRequest, this));\n                case 1:\n                    _context3.p = 1;\n                    _context3.n = 2;\n                    return _classPrivateFieldSet(_inFlightRequest, this, _assertClassBrand(_GoogleToken_brand, this, _getTokenAsyncInner).call(this, opts));\n                case 2:\n                    return _context3.a(2, _context3.v);\n                case 3:\n                    _context3.p = 3;\n                    _classPrivateFieldSet(_inFlightRequest, this, undefined);\n                    return _context3.f(3);\n                case 4:\n                    return _context3.a(2);\n            }\n        }, _callee3, this, [\n            [\n                1,\n                ,\n                3,\n                4\n            ]\n        ]);\n    }));\n    return _getTokenAsync2.apply(this, arguments);\n}\nfunction _getTokenAsyncInner(_x3) {\n    return _getTokenAsyncInner2.apply(this, arguments);\n}\nfunction _getTokenAsyncInner2() {\n    _getTokenAsyncInner2 = _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee4(opts) {\n        var creds;\n        return _regenerator().w(function(_context4) {\n            while(1)switch(_context4.n){\n                case 0:\n                    if (!(this.isTokenExpiring() === false && opts.forceRefresh === false)) {\n                        _context4.n = 1;\n                        break;\n                    }\n                    return _context4.a(2, Promise.resolve(this.rawToken));\n                case 1:\n                    if (!(!this.key && !this.keyFile)) {\n                        _context4.n = 2;\n                        break;\n                    }\n                    throw new Error(\"No key or keyFile set.\");\n                case 2:\n                    if (!(!this.key && this.keyFile)) {\n                        _context4.n = 4;\n                        break;\n                    }\n                    _context4.n = 3;\n                    return this.getCredentials(this.keyFile);\n                case 3:\n                    creds = _context4.v;\n                    this.key = creds.privateKey;\n                    this.iss = creds.clientEmail || this.iss;\n                    if (!creds.clientEmail) {\n                        _assertClassBrand(_GoogleToken_brand, this, _ensureEmail).call(this);\n                    }\n                case 4:\n                    return _context4.a(2, _assertClassBrand(_GoogleToken_brand, this, _requestToken).call(this));\n            }\n        }, _callee4, this);\n    }));\n    return _getTokenAsyncInner2.apply(this, arguments);\n}\nfunction _ensureEmail() {\n    if (!this.iss) {\n        throw new ErrorWithCode(\"email is required.\", \"MISSING_CREDENTIALS\");\n    }\n}\nfunction _revokeTokenAsync() {\n    return _revokeTokenAsync2.apply(this, arguments);\n}\nfunction _revokeTokenAsync2() {\n    _revokeTokenAsync2 = _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee5() {\n        var url;\n        return _regenerator().w(function(_context5) {\n            while(1)switch(_context5.n){\n                case 0:\n                    if (this.accessToken) {\n                        _context5.n = 1;\n                        break;\n                    }\n                    throw new Error(\"No token to revoke.\");\n                case 1:\n                    url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n                    _context5.n = 2;\n                    return this.transporter.request({\n                        url: url,\n                        retry: true\n                    });\n                case 2:\n                    _assertClassBrand(_GoogleToken_brand, this, _configure).call(this, {\n                        email: this.iss,\n                        sub: this.sub,\n                        key: this.key,\n                        keyFile: this.keyFile,\n                        scope: this.scope,\n                        additionalClaims: this.additionalClaims\n                    });\n                case 3:\n                    return _context5.a(2);\n            }\n        }, _callee5, this);\n    }));\n    return _revokeTokenAsync2.apply(this, arguments);\n}\n/**\n * Configure the GoogleToken for re-use.\n * @param  {object} options Configuration object.\n */ function _configure() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n    if (_typeof(options.scope) === \"object\") {\n        this.scope = options.scope.join(\" \");\n    } else {\n        this.scope = options.scope;\n    }\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    if (options.transporter) {\n        this.transporter = options.transporter;\n    }\n}\n/**\n * Request the token from Google.\n */ function _requestToken() {\n    return _requestToken2.apply(this, arguments);\n}\nfunction _requestToken2() {\n    _requestToken2 = _asyncToGenerator(/*#__PURE__*/ _regenerator().m(function _callee6() {\n        var iat, additionalClaims, payload, signedJWT, r, _response, _response2, body, desc, _t2;\n        return _regenerator().w(function(_context6) {\n            while(1)switch(_context6.n){\n                case 0:\n                    iat = Math.floor(new Date().getTime() / 1000);\n                    additionalClaims = this.additionalClaims || {};\n                    payload = Object.assign({\n                        iss: this.iss,\n                        scope: this.scope,\n                        aud: GOOGLE_TOKEN_URL,\n                        exp: iat + 3600,\n                        iat: iat,\n                        sub: this.sub\n                    }, additionalClaims);\n                    signedJWT = jws.sign({\n                        header: {\n                            alg: \"RS256\"\n                        },\n                        payload: payload,\n                        secret: this.key\n                    });\n                    _context6.p = 1;\n                    _context6.n = 2;\n                    return this.transporter.request({\n                        method: \"POST\",\n                        url: GOOGLE_TOKEN_URL,\n                        data: new URLSearchParams({\n                            grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                            assertion: signedJWT\n                        }),\n                        responseType: \"json\",\n                        retryConfig: {\n                            httpMethodsToRetry: [\n                                \"POST\"\n                            ]\n                        }\n                    });\n                case 2:\n                    r = _context6.v;\n                    this.rawToken = r.data;\n                    this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n                    return _context6.a(2, this.rawToken);\n                case 3:\n                    _context6.p = 3;\n                    _t2 = _context6.v;\n                    this.rawToken = undefined;\n                    this.tokenExpires = undefined;\n                    body = _t2.response && (_response = _t2.response) !== null && _response !== void 0 && _response.data ? (_response2 = _t2.response) === null || _response2 === void 0 ? void 0 : _response2.data : {};\n                    if (body.error) {\n                        desc = body.error_description ? \": \".concat(body.error_description) : \"\";\n                        _t2.message = \"\".concat(body.error).concat(desc);\n                    }\n                    throw _t2;\n                case 4:\n                    return _context6.a(2);\n            }\n        }, _callee6, this, [\n            [\n                1,\n                3\n            ]\n        ]);\n    }));\n    return _requestToken2.apply(this, arguments);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gtoken/build/cjs/src/index.cjs\n");

/***/ })

};
;